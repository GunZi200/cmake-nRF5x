#!/usr/bin/env python3

import re
import argparse
import pprint 
pp = pprint.PrettyPrinter(indent=2)

# Parse arguments
parser = argparse.ArgumentParser()
parser.add_argument("file", help="File path to a file generated by collect_data.sh script")
parser.add_argument("--path", help="part of example's path which must be present", default="", dest="path")
parser.add_argument("--source", help="comma separated list of sources, which must be specified in example", default="", dest="source")
parser.add_argument("--include", help="comma separated list of includes, which must be specified in example", default="", dest="include")
parser.add_argument("--cflag", help="comma separated list of c flags, which must be specified in example", default="", dest="cflag")
parser.add_argument("--asmflag", help="comma separated list of asm flags, which must be specified in example", default="", dest="asmflag")
parser.add_argument("--ldflag", help="comma separated list of linker flags, which must be specified in example", default="", dest="ldflag")
args = parser.parse_args()

# Data structure for active example
def new_example():
    return {
        "path": None,
        "sources": [],
        "includes": [],
        "c": [],
        "asm": [],
        "linker": [],
    }

def parse_array_arg(arg):
    arg_array = arg.split(',')
    while '' in arg_array:
        arg_array.remove('')
    return arg_array

# Arguments
file_path = args.file
example_filters = new_example()
example_filters["path"] = args.path
example_filters["sources"] = parse_array_arg(args.source)
example_filters["includes"] = parse_array_arg(args.include)
example_filters["c"] = parse_array_arg(args.cflag)
example_filters["asm"] = parse_array_arg(args.asmflag)
example_filters["linker"] = parse_array_arg(args.ldflag)

# Open data to analyze
file = open(file_path, 'r')

examples = []
active_example = new_example()
active_mode = ''
modes = [
    'FILE:',
    'SOURCES:',
    'INCLUDES:',
    'C:',
    'ASM:',
    'LINKER:',
]

# Process every line.
for line in file:
    stripped_line = line.strip()

    # Check if we need to change mode
    if stripped_line == 'FILE:':
        old_example = active_example
        if old_example["path"] != None:
            examples.append(old_example)
        active_example = new_example()

    if stripped_line in modes:
        active_mode = stripped_line
        continue

    # Depending on mode insert line in different bucket.
    if active_mode == "FILE:":
        active_example["path"] = stripped_line

    if active_mode == "SOURCES:":
        active_example["sources"].append(stripped_line)
    
    if active_mode == "INCLUDES:":
        active_example["includes"].append(stripped_line)

    if active_mode == "C:":
        active_example["c"].append(stripped_line)

    if active_mode == "ASM:":
        active_example["asm"].append(stripped_line)

    if active_mode == "LINKER:":
        active_example["linker"].append(stripped_line)

# Append last example if needed
if active_example["path"] != None:
    examples.append(active_example)

# Finds common source, flags etc. among all examples matching specified filters
core_example = new_example()

first_example = True
for example in examples:
    # Make sure that example matches specified filters
    matches = True
    for key in example:
        # Filter by path if present.
        if key == "path":
            if example_filters["path"] != '' and not re.search(example_filters["path"], example["path"]):
                matches = False
            continue

        # Check if filter is present
        if not example_filters[key]:
            continue
        
        # Go over each pattern and make sure that it was matched at least
        # once in sources, includes etc.
        for pattern in example_filters[key]:
            found_in_any = False
            for item in example[key]:
                if re.search(pattern, item):
                    found_in_any = True
            if not found_in_any:
                matches = False
                break

        # Return early if we don't match.
        if not matches:
            break

    # Ignore examples, which don't match filters.
    if not matches:
        continue

    # First example populates array
    if first_example == True:
        core_example = example
        first_example = False
        continue

    # Make sure to keep elements which appear in every example.
    for key in core_example:
        if key == "path":
            continue

        items_to_remove = []
        for item in core_example[key]:
            if not item in example[key]:
                items_to_remove.append(item)

        for item in items_to_remove:
            core_example[key].remove(item)

pp.pprint(core_example)